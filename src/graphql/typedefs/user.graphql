type User {
  id: ID!
  username: String!
}

# ---------- Query ----------
# Success Types
type UserSuccess {
  user: User!
  token: String!
}

# Error Types
type InvalidInputError implements Error {
  message: String!
}

# Union Types
union UserLoginResult = UserSuccess | InvalidInputError

type Query {
  loginUser(email: String!, password: String!): UserLoginResult
}

# ---------- Mutation ----------
# Success Types

# Error Types
type InvalidEmailInputError implements Error {
  message: String!
}
type InvalidPasswordInputError implements Error {
  message: String!
}
type UniqueEmailconstraint implements Error {
  message: String!
}

# Union Types
union UserRegisterResult =
    UserSuccess
  | InvalidEmailInputError
  | InvalidPasswordInputError
  | UniqueEmailconstraint

type Mutation {
  createUser(
    username: String!
    email: String!
    password: String!
  ): UserRegisterResult
}
