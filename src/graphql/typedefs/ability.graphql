type Ability {
  id: ID
  name: String!
  description: String
  type: String
}

# ---------- Query ----------
# Success Types
type GetAbilitySuccess {
  abilitiy: Ability
}
type GetCharacterAbilitiesSuccess {
  abilities: [Ability]
}

# Error Types
type CharacterNotFoundError implements Error {
  message: String!
}
type AbilityNotFoundError implements Error {
  message: String!
}

# Union Types
union GetAbilityResult =
    GetAbilitySuccess
  | CharacterNotFoundError
  | AbilityNotFoundError
  | InvalidTokenError

union GetCharactersAbilitiesResult =
    GetCharacterAbilitiesSuccess
  | CharacterNotFoundError
  | InvalidTokenError

type Query {
  ability(character_id: Int!, ability_id: Int!): GetAbilityResult
  abilities(character_id: Int!): GetCharactersAbilitiesResult
}

# ---------- Mutations ----------
# Success Types
type MutationAbilitySuccess {
  ability: Ability!
}

# Error Types
type InvalidAbilityNameError {
  message: String!
}

# Union Types
union AddAbilityResult =
    MutationAbilitySuccess
  | CharacterNotFoundError
  | InvalidAbilityNameError
  | InvalidTokenError

union UpdateAbilityResult =
    MutationAbilitySuccess
  | CharacterNotFoundError
  | AbilityNotFoundError
  | InvalidAbilityNameError
  | InvalidTokenError

type Mutation {
  addAbility(
    character_id: Int!
    name: String!
    description: String
    type: String
  ): AddAbilityResult

  updateAbility(
    character_id: Int!
    ability_id: Int!
    name: String
    description: String
    type: String
  ): UpdateAbilityResult

  deleteAbility(character_id: Int!, ability_id: Int!): Ability
}
