type Ability {
  id: ID
  name: String!
  description: String
  type: String
}

# ---------- Query ----------
# Success Types
type GetAbilitySuccess {
  abilitiy: Ability
}
type GetCharacterAbilitiesSuccess {
  abilities: [Ability]
}

# Error Types
type CharacterNotFoundError {
  message: String!
}
type AbilityNotFoundError {
  message: String!
}
type DefaultError {
  message: String!
}

union GetAbilityResult =
    GetAbilitySuccess
  | CharacterNotFoundError
  | AbilityNotFoundError
  | DefaultError

union GetCharactersAbilitiesResult = 
  GetCharacterAbilitiesSuccess
  | CharacterNotFoundError
  | DefaultError

type Query {
  ability(character_id: Int!, ability_id: Int!): GetAbilityResult
  abilities(character_id: Int!): GetCharactersAbilitiesResult
}

type Mutation {
  addAbility(
    character_id: Int!
    name: String!
    description: String
    type: String
  ): Ability

  updateAbility(
    character_id: Int!
    ability_id: Int!
    name: String
    description: String
    type: String
  ): Ability

  deleteAbility(character_id: Int!, ability_id: Int!): Ability
}
